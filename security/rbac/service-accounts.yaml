# RBAC Service Accounts for GetIt Bangladesh Multi-Vendor E-commerce Platform
# Amazon.com/Shopee.sg-Level Security and Access Control

# =============================================================================
# APPLICATION SERVICE ACCOUNTS
# =============================================================================

# Frontend Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend-service-account
  namespace: production
  labels:
    app: frontend
    tier: frontend
    project: getit-bangladesh
automountServiceAccountToken: false
---
# Backend Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-service-account
  namespace: production
  labels:
    app: backend
    tier: backend
    project: getit-bangladesh
automountServiceAccountToken: true
secrets:
- name: backend-service-account-token
---
# Database Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: database-service-account
  namespace: production
  labels:
    app: database
    tier: data
    project: getit-bangladesh
automountServiceAccountToken: true
---
# =============================================================================
# MONITORING SERVICE ACCOUNTS
# =============================================================================

# Prometheus Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: monitoring
  labels:
    app: prometheus
    tier: monitoring
    project: getit-bangladesh
automountServiceAccountToken: true
---
# Grafana Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-service-account
  namespace: monitoring
  labels:
    app: grafana
    tier: monitoring
    project: getit-bangladesh
automountServiceAccountToken: false
---
# =============================================================================
# CLUSTER ROLES
# =============================================================================

# Backend Cluster Role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backend-cluster-role
  labels:
    project: getit-bangladesh
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
# Prometheus Cluster Role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
  labels:
    project: getit-bangladesh
rules:
- apiGroups: [""]
  resources: 
    - nodes
    - nodes/metrics
    - services
    - endpoints
    - pods
    - configmaps
    - secrets
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
    - deployments
    - replicasets
    - daemonsets
    - statefulsets
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# =============================================================================
# CLUSTER ROLE BINDINGS
# =============================================================================

# Backend Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backend-cluster-role-binding
  labels:
    project: getit-bangladesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: backend-cluster-role
subjects:
- kind: ServiceAccount
  name: backend-service-account
  namespace: production
---
# Prometheus Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
  labels:
    project: getit-bangladesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cluster-role
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: monitoring
---
# =============================================================================
# NAMESPACE ROLES
# =============================================================================

# Backend Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: production
  name: backend-role
  labels:
    project: getit-bangladesh
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "update", "patch"]
---
# Database Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: production
  name: database-role
  labels:
    project: getit-bangladesh
rules:
- apiGroups: [""]
  resources: ["pods", "services", "persistentvolumeclaims", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["get", "list", "watch"]
---
# =============================================================================
# ROLE BINDINGS
# =============================================================================

# Backend Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backend-role-binding
  namespace: production
  labels:
    project: getit-bangladesh
subjects:
- kind: ServiceAccount
  name: backend-service-account
  namespace: production
roleRef:
  kind: Role
  name: backend-role
  apiGroup: rbac.authorization.k8s.io
---
# Database Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: database-role-binding
  namespace: production
  labels:
    project: getit-bangladesh
subjects:
- kind: ServiceAccount
  name: database-service-account
  namespace: production
roleRef:
  kind: Role
  name: database-role
  apiGroup: rbac.authorization.k8s.io
---
# =============================================================================
# SECURITY CONTEXTS AND POLICIES
# =============================================================================

# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: getit-pod-security-policy
  labels:
    project: getit-bangladesh
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# Network Policy for Production Namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: production-network-policy
  namespace: production
  labels:
    project: getit-bangladesh
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from:
    - podSelector:
        matchLabels:
          tier: frontend
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
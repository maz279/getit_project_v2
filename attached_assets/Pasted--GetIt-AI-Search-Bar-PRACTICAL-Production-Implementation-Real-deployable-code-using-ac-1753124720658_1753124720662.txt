/**
 * GetIt AI Search Bar - PRACTICAL Production Implementation
 * Real, deployable code using actual libraries and services
 * Updated: July 22, 2025
 * 
 * @description Practical AI search component that actually works in production
 * @version 1.0.0 - Realistic Implementation
 */

import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import { Input, Button, Card, Dropdown, Badge, Spin, message } from 'antd';
import { 
  SearchOutlined, 
  AudioOutlined, 
  CameraOutlined, 
  RobotOutlined,
  QrcodeOutlined,
  LoadingOutlined,
  CloseOutlined,
  GlobalOutlined
} from '@ant-design/icons';
import { debounce } from 'lodash';

// ✅ REAL types that actually exist
interface SearchResult {
  id: string;
  title: string;
  description: string;
  type: 'product' | 'category' | 'brand';
  price?: string;
  image?: string;
  rating?: number;
  url?: string;
}

interface SearchSuggestion {
  id: string;
  text: string;
  type: 'product' | 'category' | 'history' | 'trending';
  count?: number;
}

interface AISearchBarProps {
  onSearch?: (query: string, type: string) => void;
  onResults?: (results: SearchResult[]) => void;
  placeholder?: string;
  language?: 'en' | 'bn';
  className?: string;
  disabled?: boolean;
}

/**
 * ✅ REAL utility functions that actually work
 */
const sanitizeInput = (input: string): string => {
  return input
    .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
    .replace(/[<>]/g, '')
    .replace(/javascript:/gi, '')
    .trim()
    .substring(0, 200);
};

const validateInput = (input: string): { isValid: boolean; message?: string } => {
  if (input.length > 200) {
    return { isValid: false, message: 'Search query too long' };
  }
  
  if (/[<>]/.test(input)) {
    return { isValid: false, message: 'Invalid characters detected' };
  }
  
  return { isValid: true };
};

/**
 * ✅ REAL API service using actual fetch
 */
class SearchAPIService {
  private baseURL: string;
  private abortController: AbortController | null = null;

  constructor() {
    this.baseURL = process.env.REACT_APP_API_URL || '/api';
  }

  async searchSuggestions(query: string, language: string = 'en'): Promise<SearchSuggestion[]> {
    try {
      // Cancel previous request
      if (this.abortController) {
        this.abortController.abort();
      }
      
      this.abortController = new AbortController();
      
      const response = await fetch(`${this.baseURL}/search/suggestions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: sanitizeInput(query),
          language,
          limit: 8
        }),
        signal: this.abortController.signal
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      return data.suggestions || [];
    } catch (error: any) {
      if (error.name === 'AbortError') {
        return [];
      }
      console.error('Suggestions error:', error);
      return [];
    }
  }

  async performSearch(query: string, type: string, language: string = 'en'): Promise<SearchResult[]> {
    try {
      const response = await fetch(`${this.baseURL}/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: sanitizeInput(query),
          type,
          language,
          limit: 20
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      return data.results || [];
    } catch (error) {
      console.error('Search error:', error);
      throw error;
    }
  }
}

/**
 * ✅ REAL voice search using actual Web Speech API
 */
class VoiceSearchService {
  private recognition: SpeechRecognition | null = null;
  private isListening = false;

  constructor() {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      this.recognition = new SpeechRecognition();
      this.recognition.continuous = false;
      this.recognition.interimResults = false;
    }
  }

  isSupported(): boolean {
    return this.recognition !== null;
  }

  startListening(language: string = 'en-US'): Promise<string> {
    return new Promise((resolve, reject) => {
      if (!this.recognition) {
        reject(new Error('Speech recognition not supported'));
        return;
      }

      if (this.isListening) {
        this.stopListening();
      }

      this.recognition.lang = language;
      this.isListening = true;

      this.recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        this.isListening = false;
        resolve(transcript);
      };

      this.recognition.onerror = (event) => {
        this.isListening = false;
        reject(new Error(event.error));
      };

      this.recognition.onend = () => {
        this.isListening = false;
      };

      this.recognition.start();
    });
  }

  stopListening(): void {
    if (this.recognition && this.isListening) {
      this.recognition.stop();
      this.isListening = false;
    }
  }

  getIsListening(): boolean {
    return this.isListening;
  }
}

/**
 * ✅ REAL image search service using actual File API
 */
class ImageSearchService {
  private baseURL: string;

  constructor() {
    this.baseURL = process.env.REACT_APP_API_URL || '/api';
  }

  async searchByImage(file: File): Promise<SearchResult[]> {
    try {
      // Validate file
      if (!file.type.startsWith('image/')) {
        throw new Error('Invalid file type');
      }
      
      if (file.size > 5 * 1024 * 1024) { // 5MB limit
        throw new Error('File too large');
      }

      const formData = new FormData();
      formData.append('image', file);

      const response = await fetch(`${this.baseURL}/search/image`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      return data.results || [];
    } catch (error) {
      console.error('Image search error:', error);
      throw error;
    }
  }
}

/**
 * ✅ MAIN COMPONENT - Practical, working implementation
 */
export const GetItAISearchBar: React.FC<AISearchBarProps> = ({
  onSearch,
  onResults,
  placeholder,
  language = 'en',
  className = '',
  disabled = false
}) => {
  // ✅ Simple, practical state management
  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const [results, setResults] = useState<SearchResult[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessingImage, setIsProcessingImage] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState(language);
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);

  // ✅ Real service instances
  const searchAPI = useMemo(() => new SearchAPIService(), []);
  const voiceService = useMemo(() => new VoiceSearchService(), []);
  const imageService = useMemo(() => new ImageSearchService(), []);

  // ✅ Real refs
  const fileInputRef = useRef<HTMLInputElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // ✅ REAL debounced function using lodash
  const debouncedLoadSuggestions = useMemo(
    () => debounce(async (searchQuery: string) => {
      if (searchQuery.length < 2) {
        setSuggestions([]);
        setShowSuggestions(false);
        return;
      }

      try {
        const suggestionResults = await searchAPI.searchSuggestions(searchQuery, currentLanguage);
        setSuggestions(suggestionResults);
        setShowSuggestions(suggestionResults.length > 0);
      } catch (error) {
        console.error('Error loading suggestions:', error);
        setSuggestions([]);
        setShowSuggestions(false);
      }
    }, 300),
    [searchAPI, currentLanguage]
  );

  // ✅ REAL input change handler
  const handleInputChange = useCallback((value: string) => {
    const validation = validateInput(value);
    
    if (!validation.isValid) {
      message.error(validation.message);
      return;
    }

    const sanitizedValue = sanitizeInput(value);
    setQuery(sanitizedValue);
    
    if (sanitizedValue.trim()) {
      debouncedLoadSuggestions(sanitizedValue);
    } else {
      setSuggestions([]);
      setShowSuggestions(false);
    }
  }, [debouncedLoadSuggestions]);

  // ✅ REAL search execution
  const executeSearch = useCallback(async (searchQuery: string, searchType: string) => {
    if (!searchQuery.trim()) return;

    setIsSearching(true);
    setShowSuggestions(false);

    try {
      const searchResults = await searchAPI.performSearch(searchQuery, searchType, currentLanguage);
      
      setResults(searchResults);
      setShowResults(true);
      
      // Save to localStorage for history
      try {
        const history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
        const updatedHistory = [searchQuery, ...history.filter((h: string) => h !== searchQuery)].slice(0, 10);
        localStorage.setItem('searchHistory', JSON.stringify(updatedHistory));
      } catch (e) {
        console.warn('Could not save search history:', e);
      }

      onResults?.(searchResults);
      onSearch?.(searchQuery, searchType);

      message.success(`Found ${searchResults.length} results`);
    } catch (error) {
      console.error('Search failed:', error);
      message.error('Search failed. Please try again.');
    } finally {
      setIsSearching(false);
    }
  }, [searchAPI, currentLanguage, onResults, onSearch]);

  // ✅ REAL voice search handler
  const handleVoiceSearch = useCallback(async () => {
    if (!voiceService.isSupported()) {
      message.error('Voice search is not supported in your browser');
      return;
    }

    if (voiceService.getIsListening()) {
      voiceService.stopListening();
      setIsRecording(false);
      return;
    }

    try {
      setIsRecording(true);
      const transcript = await voiceService.startListening(
        currentLanguage === 'bn' ? 'bn-BD' : 'en-US'
      );
      
      setQuery(transcript);
      setIsRecording(false);
      await executeSearch(transcript, 'voice');
    } catch (error) {
      setIsRecording(false);
      console.error('Voice search error:', error);
      message.error('Voice search failed. Please try again.');
    }
  }, [voiceService, currentLanguage, executeSearch]);

  // ✅ REAL image search handler
  const handleImageSearch = useCallback(async (file: File) => {
    setIsProcessingImage(true);

    try {
      const imageResults = await imageService.searchByImage(file);
      
      // Create image preview
      const imageUrl = URL.createObjectURL(file);
      setUploadedImage(imageUrl);
      
      setResults(imageResults);
      setShowResults(true);
      
      onResults?.(imageResults);
      onSearch?.('Image Search', 'image');
      
      message.success(`Found ${imageResults.length} similar products`);
    } catch (error) {
      console.error('Image search error:', error);
      message.error('Image search failed. Please try again.');
    } finally {
      setIsProcessingImage(false);
    }
  }, [imageService, onResults, onSearch]);

  // ✅ REAL keyboard handler
  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && query.trim()) {
      executeSearch(query, 'text');
    } else if (e.key === 'Escape') {
      setShowSuggestions(false);
      setShowResults(false);
    }
  }, [query, executeSearch]);

  // ✅ REAL cleanup effect
  useEffect(() => {
    return () => {
      debouncedLoadSuggestions.cancel();
      if (uploadedImage) {
        URL.revokeObjectURL(uploadedImage);
      }
    };
  }, [debouncedLoadSuggestions, uploadedImage]);

  // ✅ REAL placeholder text
  const placeholderText = useMemo(() => {
    if (placeholder) return placeholder;
    
    return currentLanguage === 'bn' 
      ? 'GetIt-এ পণ্য, ব্র্যান্ড ও আরো কিছু খুঁজুন...'
      : 'Search GetIt for products, brands & more...';
  }, [placeholder, currentLanguage]);

  // ✅ REAL dropdown menu for advanced options
  const advancedOptions = {
    items: [
      {
        key: 'voice',
        label: currentLanguage === 'bn' ? 'ভয়েস সার্চ' : 'Voice Search',
        icon: <AudioOutlined />,
        onClick: handleVoiceSearch,
        disabled: !voiceService.isSupported() || disabled
      },
      {
        key: 'image',
        label: currentLanguage === 'bn' ? 'ইমেজ সার্চ' : 'Image Search',
        icon: <CameraOutlined />,
        onClick: () => fileInputRef.current?.click(),
        disabled: disabled
      },
      {
        key: 'ai',
        label: currentLanguage === 'bn' ? 'AI সার্চ' : 'AI Search',
        icon: <RobotOutlined />,
        onClick: () => executeSearch(query, 'ai'),
        disabled: disabled || !query.trim()
      }
    ]
  };

  return (
    <div className={`getit-search-bar ${className}`}>
      {/* ✅ Main search input */}
      <Input.Search
        ref={inputRef}
        size="large"
        placeholder={placeholderText}
        value={query}
        onChange={(e) => handleInputChange(e.target.value)}
        onKeyDown={handleKeyPress}
        onFocus={() => {
          if (!query.trim()) {
            // Show recent searches from localStorage
            try {
              const history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
              const historySuggestions = history.slice(0, 5).map((search: string, index: number) => ({
                id: `history-${index}`,
                text: search,
                type: 'history' as const
              }));
              setSuggestions(historySuggestions);
              setShowSuggestions(historySuggestions.length > 0);
            } catch (e) {
              console.warn('Could not load search history:', e);
            }
          }
        }}
        onBlur={() => {
          setTimeout(() => setShowSuggestions(false), 200);
        }}
        enterButton={
          <Button 
            type="primary" 
            icon={<SearchOutlined />}
            loading={isSearching}
            disabled={disabled}
          >
            {currentLanguage === 'bn' ? 'খুঁজুন' : 'Search'}
          </Button>
        }
        loading={isSearching}
        disabled={disabled}
        suffix={
          <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
            {/* Language Toggle */}
            <Button
              type="text"
              size="small"
              icon={<GlobalOutlined />}
              onClick={() => setCurrentLanguage(prev => prev === 'en' ? 'bn' : 'en')}
              title={currentLanguage === 'bn' ? 'Switch to English' : 'Switch to Bengali'}
            />
            
            {/* Advanced Options */}
            <Dropdown menu={advancedOptions} trigger={['click']}>
              <Button type="text" size="small" icon={<RobotOutlined />} />
            </Dropdown>
            
            {/* Loading indicators */}
            {(isRecording || isProcessingImage) && (
              <Spin indicator={<LoadingOutlined spin />} size="small" />
            )}
          </div>
        }
      />

      {/* ✅ Hidden file input */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={(e) => {
          const file = e.target.files?.[0];
          if (file) {
            handleImageSearch(file);
          }
          e.target.value = '';
        }}
        style={{ display: 'none' }}
      />

      {/* ✅ Recording indicator */}
      {isRecording && (
        <div style={{ 
          position: 'absolute', 
          top: -40, 
          left: '50%', 
          transform: 'translateX(-50%)',
          zIndex: 1000 
        }}>
          <Badge 
            status="processing" 
            text={currentLanguage === 'bn' ? 'শুনছি...' : 'Listening...'} 
          />
        </div>
      )}

      {/* ✅ Suggestions dropdown */}
      {showSuggestions && suggestions.length > 0 && (
        <Card
          size="small"
          style={{
            position: 'absolute',
            top: '100%',
            left: 0,
            right: 0,
            zIndex: 1000,
            marginTop: 4,
            maxHeight: 300,
            overflow: 'auto'
          }}
        >
          {suggestions.map((suggestion) => (
            <div
              key={suggestion.id}
              style={{
                padding: '8px 12px',
                cursor: 'pointer',
                borderBottom: '1px solid #f0f0f0'
              }}
              onClick={() => {
                setQuery(suggestion.text);
                setShowSuggestions(false);
                executeSearch(suggestion.text, 'text');
              }}
              onMouseDown={(e) => e.preventDefault()}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                {suggestion.type === 'history' && <SearchOutlined style={{ color: '#999' }} />}
                {suggestion.type === 'trending' && <span style={{ color: '#ff4d4f' }}>🔥</span>}
                {suggestion.type === 'product' && <span style={{ color: '#1677ff' }}>📦</span>}
                <span>{suggestion.text}</span>
                {suggestion.count && (
                  <span style={{ color: '#999', fontSize: '12px', marginLeft: 'auto' }}>
                    {suggestion.count}
                  </span>
                )}
              </div>
            </div>
          ))}
        </Card>
      )}

      {/* ✅ Search results */}
      {showResults && results.length > 0 && (
        <Card
          title={
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span>
                {currentLanguage === 'bn' ? 'সার্চ রেজাল্ট' : 'Search Results'} ({results.length})
              </span>
              <Button
                type="text"
                size="small"
                icon={<CloseOutlined />}
                onClick={() => {
                  setShowResults(false);
                  setUploadedImage(null);
                }}
              />
            </div>
          }
          style={{
            position: 'absolute',
            top: '100%',
            left: 0,
            right: 0,
            zIndex: 1000,
            marginTop: 4,
            maxHeight: 400,
            overflow: 'auto'
          }}
        >
          {uploadedImage && (
            <div style={{ marginBottom: 16, textAlign: 'center' }}>
              <img 
                src={uploadedImage} 
                alt="Uploaded" 
                style={{ maxWidth: '100%', maxHeight: 120, objectFit: 'contain' }}
              />
            </div>
          )}
          
          {results.map((result) => (
            <div
              key={result.id}
              style={{
                padding: 12,
                borderBottom: '1px solid #f0f0f0',
                cursor: 'pointer'
              }}
              onClick={() => {
                if (result.url) {
                  window.open(result.url, '_blank');
                }
                setShowResults(false);
              }}
            >
              <div style={{ display: 'flex', gap: 12 }}>
                {result.image && (
                  <img 
                    src={result.image} 
                    alt={result.title}
                    style={{ width: 60, height: 60, objectFit: 'cover', borderRadius: 4 }}
                  />
                )}
                <div style={{ flex: 1 }}>
                  <div style={{ fontWeight: 500, marginBottom: 4 }}>{result.title}</div>
                  <div style={{ color: '#666', fontSize: '14px', marginBottom: 4 }}>
                    {result.description}
                  </div>
                  <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                    {result.price && (
                      <span style={{ color: '#52c41a', fontWeight: 500 }}>৳{result.price}</span>
                    )}
                    {result.rating && (
                      <span style={{ color: '#faad14' }}>⭐ {result.rating}</span>
                    )}
                    <Badge 
                      color="blue" 
                      text={result.type} 
                      style={{ fontSize: '12px' }}
                    />
                  </div>
                </div>
              </div>
            </div>
          ))}
        </Card>
      )}
    </div>
  );
};

export default GetItAISearchBar;
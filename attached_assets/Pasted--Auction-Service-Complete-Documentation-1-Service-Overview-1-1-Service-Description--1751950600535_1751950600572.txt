# Auction Service - Complete Documentation

## 1. Service Overview

### 1.1 Service Description
The Auction Service enables live bidding functionality for GetIt's multi-vendor ecommerce platform, allowing vendors to create time-limited auctions for products with competitive bidding mechanisms tailored for Bangladesh market.

### 1.2 Core Responsibilities
- **Auction Management**: Create, manage, and monitor product auctions
- **Bidding Engine**: Real-time bidding with validation and fraud prevention
- **Time Management**: Auction scheduling, extensions, and auto-closure
- **Notification Integration**: Real-time bid notifications and updates
- **Payment Integration**: Winner payment processing and escrow management
- **Anti-Fraud**: Bid manipulation detection and prevention

### 1.3 Technology Stack
```yaml
Service: auction-service
Technology: Node.js + Express.js + Socket.io
Database: PostgreSQL + Redis
Message Queue: Apache Kafka
Caching: Redis
Real-time: Socket.io
```

## 2. Database Design

### 2.1 PostgreSQL Schema
```sql
-- Auctions table
CREATE TABLE auctions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    vendor_id UUID NOT NULL REFERENCES vendors(id),
    product_id UUID NOT NULL REFERENCES products(id),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    starting_price DECIMAL(10,2) NOT NULL,
    reserve_price DECIMAL(10,2),
    current_bid DECIMAL(10,2) DEFAULT 0,
    bid_increment DECIMAL(10,2) DEFAULT 10.00,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    status auction_status DEFAULT 'scheduled',
    total_bids INTEGER DEFAULT 0,
    winner_id UUID REFERENCES users(id),
    winning_bid DECIMAL(10,2),
    auto_extend BOOLEAN DEFAULT true,
    max_extensions INTEGER DEFAULT 3,
    extensions_used INTEGER DEFAULT 0,
    payment_deadline TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Bids table
CREATE TABLE bids (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    auction_id UUID NOT NULL REFERENCES auctions(id),
    bidder_id UUID NOT NULL REFERENCES users(id),
    amount DECIMAL(10,2) NOT NULL,
    bid_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status bid_status DEFAULT 'active',
    is_automatic BOOLEAN DEFAULT false,
    proxy_max_bid DECIMAL(10,2),
    ip_address INET,
    user_agent TEXT,
    is_fraudulent BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Auction watchers table
CREATE TABLE auction_watchers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    auction_id UUID NOT NULL REFERENCES auctions(id),
    user_id UUID NOT NULL REFERENCES users(id),
    notification_preferences JSONB DEFAULT '{"bid_outbid": true, "auction_ending": true}',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(auction_id, user_id)
);

-- Proxy bids table
CREATE TABLE proxy_bids (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    auction_id UUID NOT NULL REFERENCES auctions(id),
    bidder_id UUID NOT NULL REFERENCES users(id),
    max_bid_amount DECIMAL(10,2) NOT NULL,
    current_bid_amount DECIMAL(10,2) DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Auction categories table
CREATE TABLE auction_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    name_bn VARCHAR(100), -- Bangla name
    description TEXT,
    commission_rate DECIMAL(5,2) DEFAULT 5.00,
    min_auction_duration INTEGER DEFAULT 86400, -- 24 hours in seconds
    max_auction_duration INTEGER DEFAULT 604800, -- 7 days in seconds
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Auction payments table
CREATE TABLE auction_payments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    auction_id UUID NOT NULL REFERENCES auctions(id),
    winner_id UUID NOT NULL REFERENCES users(id),
    payment_amount DECIMAL(10,2) NOT NULL,
    commission_amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50),
    payment_status payment_status DEFAULT 'pending',
    payment_gateway_response JSONB,
    paid_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes
CREATE INDEX idx_auctions_status ON auctions(status);
CREATE INDEX idx_auctions_end_time ON auctions(end_time);
CREATE INDEX idx_auctions_vendor ON auctions(vendor_id);
CREATE INDEX idx_bids_auction ON bids(auction_id);
CREATE INDEX idx_bids_bidder ON bids(bidder_id);
CREATE INDEX idx_bids_amount ON bids(amount DESC);
```

### 2.2 Redis Schema
```javascript
// Real-time auction data
AUCTION:{auction_id} = {
    current_bid: "1500.00",
    bid_count: 45,
    watchers: 23,
    last_bidder: "user_123",
    time_remaining: 3600
}

// Bid throttling
BID_THROTTLE:{user_id}:{auction_id} = timestamp

// Active bidders
AUCTION_BIDDERS:{auction_id} = SET[user_id1, user_id2, ...]

// Auction queue for ending
AUCTION_ENDING_QUEUE = SORTED_SET[auction_id:end_timestamp]
```

## 3. Folder Structure

```
auction-service/
├── src/
│   ├── controllers/
│   │   ├── auction-controller.js           # Auction CRUD operations
│   │   ├── bidding-controller.js           # Bidding operations
│   │   ├── proxy-bid-controller.js         # Automatic bidding
│   │   ├── auction-admin-controller.js     # Admin auction management
│   │   └── auction-stats-controller.js     # Auction analytics
│   ├── models/
│   │   ├── Auction.js                      # Main auction model
│   │   ├── Bid.js                          # Bid model
│   │   ├── ProxyBid.js                     # Automatic bid model
│   │   ├── AuctionWatcher.js               # Auction watcher model
│   │   ├── AuctionCategory.js              # Auction category model
│   │   └── AuctionPayment.js               # Payment model
│   ├── routes/
│   │   ├── auction-routes.js               # Auction management endpoints
│   │   ├── bidding-routes.js               # Bidding endpoints
│   │   ├── auction-public-routes.js        # Public auction endpoints
│   │   └── auction-admin-routes.js         # Admin endpoints
│   ├── services/
│   │   ├── auction-service.js              # Auction business logic
│   │   ├── bidding-service.js              # Bidding logic
│   │   ├── auction-scheduler.js            # Auction timing service
│   │   ├── proxy-bid-service.js            # Automatic bidding
│   │   ├── auction-notification-service.js # Auction notifications
│   │   ├── fraud-detection-service.js      # Bid fraud detection
│   │   └── payment-escrow-service.js       # Payment escrow management
│   ├── middleware/
│   │   ├── auction-auth.js                 # Auction authorization
│   │   ├── bid-validation.js               # Bid validation
│   │   ├── rate-limiting.js                # Bid rate limiting
│   │   └── auction-access.js               # Auction access control
│   ├── utils/
│   │   ├── auction-utils.js                # Auction utilities
│   │   ├── bid-calculation.js              # Bid calculation logic
│   │   ├── time-utils.js                   # Time management utilities
│   │   └── notification-utils.js           # Notification helpers
│   ├── websocket/
│   │   ├── auction-socket.js               # Socket.io auction events
│   │   ├── bid-socket.js                   # Real-time bidding
│   │   ├── notification-socket.js          # Real-time notifications
│   │   └── admin-socket.js                 # Admin monitoring
│   ├── jobs/
│   │   ├── auction-scheduler-job.js        # Auction start/end scheduling
│   │   ├── bid-processor-job.js            # Bid processing queue
│   │   ├── payment-reminder-job.js         # Payment deadline reminders
│   │   └── auction-cleanup-job.js          # Data cleanup
│   ├── config/
│   │   ├── database.js                     # Database configuration
│   │   ├── redis.js                        # Redis configuration
│   │   ├── kafka.js                        # Kafka configuration
│   │   ├── socket.js                       # Socket.io configuration
│   │   └── auction-config.js               # Auction-specific settings
│   └── app.js                              # Express application setup
├── bangladesh-features/                    # Bangladesh-specific features
│   ├── local-auction-rules.js             # Local auction regulations
│   ├── bangladesh-payment-integration.js  # bKash, Nagad integration
│   ├── bengali-auction-templates.js       # Bangla auction templates
│   ├── local-timezone-handler.js          # BD timezone handling
│   └── cultural-auction-types.js          # Festival/cultural auctions
├── fraud-detection/                        # Auction fraud detection
│   ├── bid-pattern-analyzer.js            # Suspicious bid pattern detection
│   ├── ip-geolocation-checker.js          # Location-based fraud detection
│   ├── user-behavior-analyzer.js          # Bidder behavior analysis
│   ├── proxy-bid-fraud-detector.js        # Automatic bid fraud detection
│   └── auction-manipulation-detector.js   # Auction manipulation detection
├── analytics/                             # Auction analytics
│   ├── bidding-analytics.js               # Bid pattern analytics
│   ├── auction-performance.js             # Auction success metrics
│   ├── vendor-auction-stats.js            # Vendor auction performance
│   └── revenue-analytics.js               # Auction revenue analysis
├── tests/
│   ├── unit/
│   │   ├── auction-service.test.js
│   │   ├── bidding-service.test.js
│   │   ├── proxy-bid.test.js
│   │   └── fraud-detection.test.js
│   ├── integration/
│   │   ├── auction-flow.test.js
│   │   ├── real-time-bidding.test.js
│   │   └── payment-integration.test.js
│   └── e2e/
│       ├── complete-auction-cycle.test.js
│       └── concurrent-bidding.test.js
├── migrations/
│   ├── 001_create_auctions_table.sql
│   ├── 002_create_bids_table.sql
│   ├── 003_create_auction_watchers_table.sql
│   ├── 004_create_proxy_bids_table.sql
│   ├── 005_create_auction_categories_table.sql
│   ├── 006_create_auction_payments_table.sql
│   └── 007_add_bangladesh_auction_fields.sql
├── localization/                          # Multi-language support
│   ├── en/
│   │   ├── auction-messages.json          # English auction messages
│   │   ├── bid-notifications.json         # English bid notifications
│   │   └── email-templates.json           # English email templates
│   └── bn/                               # Bangla translations
│       ├── auction-messages.json          # Bangla auction messages
│       ├── bid-notifications.json         # Bangla bid notifications
│       └── email-templates.json           # Bangla email templates
├── documentation/                         # Auction service documentation
│   ├── api-documentation/
│   │   ├── auction-apis.md
│   │   ├── bidding-apis.md
│   │   └── websocket-apis.md
│   ├── integration-guides/
│   │   ├── vendor-auction-integration.md
│   │   ├── payment-integration.md
│   │   └── notification-integration.md
│   └── business-rules/
│       ├── bangladesh-auction-rules.md
│       ├── fraud-prevention-rules.md
│       └── commission-structure.md
├── docker-compose.yml                     # Multi-service composition
├── Dockerfile                            # Docker configuration
├── package.json                          # Node.js dependencies
└── README.md                             # Service documentation
```

## 4. API Endpoints

### 4.1 Auction Management APIs
```javascript
// Create new auction
POST /api/v1/auctions
Body: {
    product_id: "uuid",
    title: "iPhone 14 Pro Auction",
    description: "Brand new iPhone 14 Pro",
    starting_price: 1000.00,
    reserve_price: 1200.00,
    bid_increment: 50.00,
    start_time: "2024-03-15T10:00:00Z",
    end_time: "2024-03-18T22:00:00Z",
    category_id: "uuid",
    auto_extend: true
}

// Get auction details
GET /api/v1/auctions/:id
Response: {
    id: "uuid",
    vendor_id: "uuid",
    product: {...},
    current_bid: 1500.00,
    bid_count: 45,
    time_remaining: 3600,
    status: "active",
    watchers_count: 23
}

// Update auction
PUT /api/v1/auctions/:id
Body: {
    title: "Updated title",
    description: "Updated description"
}

// Delete auction (if no bids)
DELETE /api/v1/auctions/:id

// Get vendor auctions
GET /api/v1/vendors/:vendor_id/auctions
Query: ?status=active&page=1&limit=20

// Search auctions
GET /api/v1/auctions/search
Query: ?query=iphone&category=electronics&min_price=500&max_price=2000
```

### 4.2 Bidding APIs
```javascript
// Place bid
POST /api/v1/auctions/:id/bids
Body: {
    amount: 1550.00,
    is_proxy_bid: false
}

// Set proxy bid
POST /api/v1/auctions/:id/proxy-bids
Body: {
    max_amount: 2000.00
}

// Get auction bids
GET /api/v1/auctions/:id/bids
Query: ?page=1&limit=50

// Get user bid history
GET /api/v1/users/:user_id/bids
Query: ?auction_id=uuid&status=active

// Cancel proxy bid
DELETE /api/v1/auctions/:id/proxy-bids
```

### 4.3 Auction Watching APIs
```javascript
// Watch auction
POST /api/v1/auctions/:id/watch
Body: {
    notification_preferences: {
        bid_outbid: true,
        auction_ending: true,
        price_drop: false
    }
}

// Unwatch auction
DELETE /api/v1/auctions/:id/watch

// Get watched auctions
GET /api/v1/users/:user_id/watched-auctions
```

### 4.4 Real-time WebSocket Events
```javascript
// Client subscribes to auction
socket.emit('join_auction', { auction_id: 'uuid' });

// New bid placed
socket.on('new_bid', {
    auction_id: 'uuid',
    bid_amount: 1550.00,
    bidder_name: 'John D.',
    time_remaining: 3540
});

// Auction ending soon
socket.on('auction_ending', {
    auction_id: 'uuid',
    time_remaining: 300 // 5 minutes
});

// Auction extended
socket.on('auction_extended', {
    auction_id: 'uuid',
    new_end_time: '2024-03-18T22:10:00Z',
    extensions_remaining: 2
});

// Auction ended
socket.on('auction_ended', {
    auction_id: 'uuid',
    winning_bid: 1750.00,
    winner_id: 'uuid'
});
```

## 5. Business Rules & Features

### 5.1 Bangladesh-Specific Features
- **Local Payment Integration**: bKash, Nagad, Rocket for auction payments
- **Bangla Language Support**: Full Bengali interface and notifications
- **Cultural Auction Categories**: Festival items, traditional products
- **Local Time Zone**: All auctions run on Bangladesh Standard Time
- **Mobile-First Design**: Optimized for mobile bidding experience
- **Offline Capability**: Basic offline viewing of watched auctions

### 5.2 Fraud Prevention
- **IP Geolocation**: Detect suspicious bidding patterns from different locations
- **Bid Pattern Analysis**: Identify artificial bid inflation
- **User Behavior Analysis**: Track bidding patterns and flag anomalies
- **Proxy Bid Fraud Detection**: Prevent manipulation of automatic bidding
- **Rate Limiting**: Prevent rapid-fire bidding attempts

### 5.3 Commission Structure
- **Standard Commission**: 5% of final bid amount
- **Premium Categories**: 7% for electronics, luxury items
- **Local Artisan Products**: Reduced 3% commission to support local vendors
- **Festival Auctions**: Special commission rates during major festivals

## 6. Integration Points

### 6.1 Service Dependencies
- **Product Service**: Product information and availability
- **User Service**: Bidder authentication and profiles
- **Payment Service**: Winner payment processing
- **Notification Service**: Real-time bid notifications
- **Vendor Service**: Vendor verification and management
- **ML Service**: Fraud detection and bid pattern analysis

### 6.2 Event Publishing
```javascript
// Kafka events published by auction service
{
    topic: 'auction.bid.placed',
    event: {
        auction_id: 'uuid',
        bidder_id: 'uuid',
        bid_amount: 1550.00,
        timestamp: '2024-03-17T15:30:00Z'
    }
}

{
    topic: 'auction.ended',
    event: {
        auction_id: 'uuid',
        winner_id: 'uuid',
        winning_bid: 1750.00,
        vendor_id: 'uuid',
        commission_amount: 87.50
    }
}
```

## 7. Monitoring & Analytics

### 7.1 Key Metrics
- **Active Auctions**: Number of currently running auctions
- **Bid Velocity**: Bids per minute across all auctions
- **Conversion Rate**: Percentage of auctions with successful sales
- **Average Sale Price**: Average final bid amounts
- **Fraud Detection Rate**: Percentage of flagged suspicious activities

### 7.2 Performance Monitoring
- **WebSocket Connection Count**: Real-time connection monitoring
- **Bid Processing Latency**: Time from bid submission to processing
- **Database Query Performance**: Auction and bid query optimization
- **Redis Cache Hit Ratio**: Cache performance for real-time data

This comprehensive auction service provides a robust, scalable, and fraud-resistant auction platform specifically designed for Bangladesh's ecommerce market with real-time bidding capabilities and local payment integration.
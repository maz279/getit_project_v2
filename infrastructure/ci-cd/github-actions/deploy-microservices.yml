name: üöÄ Deploy GetIt Microservices to Kubernetes

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: getit-platform

jobs:
  security-scan:
    name: üîí Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-test:
    name: üèóÔ∏è Build & Test Microservices
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        service:
          - user-service
          - product-service
          - payment-service
          - order-service
          - vendor-service
          - inventory-service
          - notification-service
          - analytics-service
          - ml-service
          - finance-service
          - search-service
          - localization-service
          - shipping-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript compilation
      run: npm run build
      
    - name: Run tests for ${{ matrix.service }}
      run: npm run test:${{ matrix.service }}
      
    - name: Run integration tests
      run: npm run test:integration:${{ matrix.service }}
      
    - name: Generate test coverage
      run: npm run coverage:${{ matrix.service }}
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/${{ matrix.service }}/lcov.info
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  build-docker-images:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      matrix:
        service:
          - user-service
          - product-service
          - payment-service
          - order-service
          - vendor-service
          - inventory-service
          - notification-service
          - analytics-service
          - ml-service
          - finance-service
          - search-service
          - localization-service
          - shipping-service
          - frontend
          - api-gateway
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-to-kubernetes:
    name: üöÄ Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }}
        
    - name: Create namespace if not exists
      run: |
        NAMESPACE=${{ github.ref == 'refs/heads/main' && 'getit-production' || 'getit-development' }}
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Deploy secrets
      run: |
        NAMESPACE=${{ github.ref == 'refs/heads/main' && 'getit-production' || 'getit-development' }}
        
        # Create Bangladesh payment secrets
        kubectl create secret generic bangladesh-payment-secret \
          --namespace=$NAMESPACE \
          --from-literal=bkash-app-key="${{ secrets.BKASH_APP_KEY }}" \
          --from-literal=bkash-app-secret="${{ secrets.BKASH_APP_SECRET }}" \
          --from-literal=bkash-username="${{ secrets.BKASH_USERNAME }}" \
          --from-literal=bkash-password="${{ secrets.BKASH_PASSWORD }}" \
          --from-literal=nagad-merchant-id="${{ secrets.NAGAD_MERCHANT_ID }}" \
          --from-literal=nagad-merchant-number="${{ secrets.NAGAD_MERCHANT_NUMBER }}" \
          --from-literal=nagad-public-key="${{ secrets.NAGAD_PUBLIC_KEY }}" \
          --from-literal=nagad-private-key="${{ secrets.NAGAD_PRIVATE_KEY }}" \
          --from-literal=rocket-merchant-id="${{ secrets.ROCKET_MERCHANT_ID }}" \
          --from-literal=rocket-secret-key="${{ secrets.ROCKET_SECRET_KEY }}" \
          --from-literal=ssl-store-id="${{ secrets.SSL_STORE_ID }}" \
          --from-literal=ssl-store-password="${{ secrets.SSL_STORE_PASSWORD }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy microservices
      run: |
        NAMESPACE=${{ github.ref == 'refs/heads/main' && 'getit-production' || 'getit-development' }}
        
        # Update image tags in deployment files
        find infrastructure/kubernetes/deployments/core-services -name "*.yaml" -exec \
          sed -i "s|image: getit/|image: ${{ env.REGISTRY }}/${{ github.repository }}/|g" {} \;
        find infrastructure/kubernetes/deployments/core-services -name "*.yaml" -exec \
          sed -i "s|:latest|:${{ github.sha }}|g" {} \;
        find infrastructure/kubernetes/deployments/core-services -name "*.yaml" -exec \
          sed -i "s|namespace: getit-development|namespace: $NAMESPACE|g" {} \;
        
        # Apply all deployments
        kubectl apply -f infrastructure/kubernetes/deployments/core-services/ --namespace=$NAMESPACE
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=600s deployment --all --namespace=$NAMESPACE

    - name: Run smoke tests
      run: |
        NAMESPACE=${{ github.ref == 'refs/heads/main' && 'getit-production' || 'getit-development' }}
        
        # Test core service endpoints
        kubectl run test-pod --image=curlimages/curl:latest --rm -i --restart=Never --namespace=$NAMESPACE -- \
          sh -c "
            curl -f http://user-service:3001/api/v1/users/health &&
            curl -f http://product-service:3002/api/v1/products/health &&
            curl -f http://payment-service:3003/api/v1/payments/health &&
            curl -f http://order-service:3004/api/v1/orders/health &&
            curl -f http://shipping-service:3013/api/v1/shipping/health
          "

  performance-tests:
    name: üöÄ Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-to-kubernetes
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run K6 performance tests
      uses: grafana/k6-action@v0.3.1
      with:
        filename: infrastructure/performance/k6-tests/load-test.js
        flags: --env ENVIRONMENT=production

  notify-deployment:
    name: üì¢ Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-to-kubernetes, performance-tests]
    if: always()
    
    steps:
    - name: Notify success
      if: success()
      run: |
        echo "‚úÖ GetIt Platform successfully deployed to ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
        echo "üöÄ All 13 microservices are operational"
        echo "üáßüá© Bangladesh payment and shipping integrations active"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed"
        echo "üîç Check the logs for details"
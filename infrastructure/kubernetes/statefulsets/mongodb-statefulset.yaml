apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: getit-production
  labels:
    app: mongodb
    component: nosql-database
    platform: getit-bangladesh
    tier: infrastructure
  annotations:
    description: "MongoDB Replica Set for Analytics and Logging - GetIt Bangladesh"
    contact: "database-team@getit.com.bd"
spec:
  serviceName: mongodb-headless
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: nosql-database
        platform: getit-bangladesh
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: mongodb
        image: mongo:7.0.4
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 27017
          name: mongodb
          protocol: TCP
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-password
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-database
        - name: MONGODB_REPLICA_SET_MODE
          value: primary
        - name: MONGODB_REPLICA_SET_NAME
          value: getit-rs
        - name: MONGODB_ADVERTISED_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - /bin/bash
        - -c
        - |
          # Start MongoDB with replica set configuration
          exec mongod \
            --bind_ip_all \
            --replSet getit-rs \
            --auth \
            --wiredTigerCacheSizeGB 2 \
            --wiredTigerCollectionBlockCompressor snappy \
            --wiredTigerIndexCompressor prefix \
            --directoryperdb \
            --journal \
            --logpath /var/log/mongodb/mongod.log \
            --logappend \
            --oplogSize 1024
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /data/configdb
        - name: mongodb-logs
          mountPath: /var/log/mongodb
        - name: mongodb-config-file
          mountPath: /etc/mongod.conf
          subPath: mongod.conf
        resources:
          requests:
            memory: "4Gi"
            cpu: "1"
          limits:
            memory: "16Gi"
            cpu: "4"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
      - name: mongodb-exporter
        image: percona/mongodb_exporter:0.40.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9216
          name: metrics
          protocol: TCP
        env:
        - name: MONGODB_URI
          value: "mongodb://$(MONGO_INITDB_ROOT_USERNAME):$(MONGO_INITDB_ROOT_PASSWORD)@localhost:27017/admin"
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9216
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9216
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-config-file
        configMap:
          name: mongodb-config
      - name: mongodb-logs
        emptyDir: {}
      initContainers:
      - name: mongodb-init
        image: mongo:7.0.4
        command:
        - /bin/bash
        - -c
        - |
          # Initialize replica set if this is the first pod
          if [[ $HOSTNAME == *-0 ]]; then
            echo "Initializing replica set..."
            sleep 10
            mongosh --host localhost:27017 --eval "
              rs.initiate({
                _id: 'getit-rs',
                members: [
                  { _id: 0, host: 'mongodb-0.mongodb-headless.getit-production.svc.cluster.local:27017' },
                  { _id: 1, host: 'mongodb-1.mongodb-headless.getit-production.svc.cluster.local:27017' },
                  { _id: 2, host: 'mongodb-2.mongodb-headless.getit-production.svc.cluster.local:27017' }
                ]
              })
            "
          fi
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-password
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app: mongodb
        component: nosql-database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd-storage
      resources:
        requests:
          storage: 200Gi
  - metadata:
      name: mongodb-config
      labels:
        app: mongodb
        component: nosql-database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard-storage
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: getit-production
  labels:
    app: mongodb
    component: nosql-database
    platform: getit-bangladesh
  annotations:
    description: "MongoDB Service for GetIt Bangladesh"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9216"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  - port: 9216
    targetPort: 9216
    protocol: TCP
    name: metrics
  selector:
    app: mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-headless
  namespace: getit-production
  labels:
    app: mongodb
    component: nosql-database
    platform: getit-bangladesh
  annotations:
    description: "MongoDB Headless Service for StatefulSet"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: getit-production
  labels:
    app: mongodb
    component: nosql-database
    platform: getit-bangladesh
data:
  mongod.conf: |
    # MongoDB Configuration for GetIt Bangladesh Production
    net:
      port: 27017
      bindIp: 0.0.0.0
      maxIncomingConnections: 20000
      compression:
        compressors: snappy,zstd
    
    storage:
      dbPath: /data/db
      journal:
        enabled: true
        commitIntervalMs: 100
      wiredTiger:
        engineConfig:
          cacheSizeGB: 2
          statisticsLogDelaySecs: 0
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true
    
    systemLog:
      destination: file
      path: /var/log/mongodb/mongod.log
      logAppend: true
      logRotate: reopen
      component:
        accessControl:
          verbosity: 1
        command:
          verbosity: 1
    
    replication:
      replSetName: getit-rs
      oplogSizeMB: 1024
    
    security:
      authorization: enabled
      clusterAuthMode: keyFile
      keyFile: /etc/mongodb-keyfile
    
    operationProfiling:
      mode: slowOp
      slowOpThresholdMs: 100
    
    setParameter:
      enableLocalhostAuthBypass: false
      authenticationMechanisms: SCRAM-SHA-256
      maxLogSizeKB: 10
      quiet: false
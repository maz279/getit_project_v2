apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
    tier: infrastructure
  annotations:
    description: "Grafana Dashboard for GetIt Bangladesh"
    contact: "devops-team@getit.com.bd"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        platform: getit-bangladesh
        version: v10.2.2
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        # Basic Configuration
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: secret-key
        
        # Server Configuration
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.getit.com.bd"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: "false"
        - name: GF_SERVER_DOMAIN
          value: "grafana.getit.com.bd"
        
        # Database Configuration (PostgreSQL)
        - name: GF_DATABASE_TYPE
          value: "postgres"
        - name: GF_DATABASE_HOST
          value: "postgresql:5432"
        - name: GF_DATABASE_NAME
          value: "grafana"
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: grafana-db-user
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: grafana-db-password
        
        # Performance Configuration
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_USERS_ALLOW_ORG_CREATE
          value: "false"
        - name: GF_USERS_AUTO_ASSIGN_ORG
          value: "true"
        - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
          value: "Viewer"
        
        # Security Configuration
        - name: GF_SECURITY_COOKIE_SECURE
          value: "true"
        - name: GF_SECURITY_COOKIE_SAMESITE
          value: "strict"
        - name: GF_SECURITY_CONTENT_TYPE_PROTECTION
          value: "true"
        - name: GF_SECURITY_STRICT_TRANSPORT_SECURITY
          value: "true"
        - name: GF_SECURITY_X_CONTENT_TYPE_OPTIONS
          value: "true"
        - name: GF_SECURITY_X_XSS_PROTECTION
          value: "true"
        
        # Auth Configuration
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_AUTH_LOGIN_REMEMBER_DAYS
          value: "7"
        - name: GF_AUTH_LOGIN_MAXIMUM_INACTIVE_LIFETIME_DAYS
          value: "30"
        
        # Datasource Configuration
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,briangann-gauge-panel,vonage-status-panel"
        
        # Alerting Configuration
        - name: GF_ALERTING_ENABLED
          value: "true"
        - name: GF_UNIFIED_ALERTING_ENABLED
          value: "true"
        
        # Bangladesh Configuration
        - name: GF_DATE_FORMATS_DEFAULT_TIMEZONE
          value: "Asia/Dhaka"
        - name: GF_DATE_FORMATS_FULL_DATE
          value: "MMM Do, YYYY h:mm:ss a"
        
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources-config
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-datasources-config
        configMap:
          name: grafana-datasources-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data-pvc
      
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: monitoring
      
      tolerations:
      - key: "monitoring-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - grafana
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
  annotations:
    description: "Grafana Service for GetIt Bangladesh"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: grafana
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data-pvc
  namespace: getit-monitoring
  labels:
    app: grafana
    component: storage
    platform: getit-bangladesh
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard-storage
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
data:
  grafana.ini: |
    [analytics]
    reporting_enabled = false
    check_for_updates = false
    
    [security]
    admin_user = ${GF_SECURITY_ADMIN_USER}
    admin_password = ${GF_SECURITY_ADMIN_PASSWORD}
    secret_key = ${GF_SECURITY_SECRET_KEY}
    cookie_secure = true
    cookie_samesite = strict
    content_type_protection = true
    strict_transport_security = true
    x_content_type_options = true
    x_xss_protection = true
    
    [server]
    root_url = ${GF_SERVER_ROOT_URL}
    serve_from_sub_path = false
    domain = ${GF_SERVER_DOMAIN}
    
    [database]
    type = postgres
    host = ${GF_DATABASE_HOST}
    name = ${GF_DATABASE_NAME}
    user = ${GF_DATABASE_USER}
    password = ${GF_DATABASE_PASSWORD}
    ssl_mode = require
    
    [session]
    provider = postgres
    provider_config = postgres://${GF_DATABASE_USER}:${GF_DATABASE_PASSWORD}@${GF_DATABASE_HOST}/${GF_DATABASE_NAME}?sslmode=require
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer
    
    [auth]
    login_remember_days = 7
    login_maximum_inactive_lifetime_days = 30
    
    [auth.anonymous]
    enabled = false
    
    [auth.basic]
    enabled = true
    
    [alerting]
    enabled = true
    
    [unified_alerting]
    enabled = true
    
    [date_formats]
    default_timezone = Asia/Dhaka
    full_date = MMM Do, YYYY h:mm:ss a
    
    [log]
    mode = console
    level = info
    
    [metrics]
    enabled = true
    interval_seconds = 10
    
    [feature_toggles]
    enable = publicDashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources-config
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        httpMethod: POST
        queryTimeout: 60s
        timeInterval: 15s
    
    - name: PostgreSQL
      type: postgres
      access: proxy
      url: postgresql:5432
      database: getit_bangladesh
      user: ${GF_DATABASE_USER}
      secureJsonData:
        password: ${GF_DATABASE_PASSWORD}
      jsonData:
        sslmode: require
        postgresVersion: 1300
        timescaledb: false
    
    - name: Elasticsearch
      type: elasticsearch
      access: proxy
      url: http://elasticsearch:9200
      database: logstash-*
      jsonData:
        interval: Daily
        timeField: "@timestamp"
        esVersion: 8
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'getit-dashboards'
      orgId: 1
      folder: 'GetIt Bangladesh'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
data:
  getit-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GetIt Bangladesh - Platform Overview",
        "tags": ["getit", "bangladesh", "overview"],
        "timezone": "Asia/Dhaka",
        "panels": [
          {
            "id": 1,
            "title": "Active Users",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{service=\"customer-web\"}[5m]))",
                "legendFormat": "Active Users"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Orders per Minute",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(orders_total[1m]))",
                "legendFormat": "Orders/min"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Revenue (BDT)",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(revenue_bdt)",
                "legendFormat": "Revenue BDT"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "System Health",
            "type": "stat",
            "targets": [
              {
                "expr": "avg(up{job=\"getit-services\"})",
                "legendFormat": "Health %"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
  
  getit-microservices.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GetIt Bangladesh - Microservices",
        "tags": ["getit", "bangladesh", "microservices"],
        "timezone": "Asia/Dhaka",
        "panels": [
          {
            "id": 1,
            "title": "Service Uptime",
            "type": "table",
            "targets": [
              {
                "expr": "up{job=\"getit-services\"}",
                "legendFormat": "{{kubernetes_name}}"
              }
            ],
            "gridPos": {"h": 12, "w": 24, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum by (service) (rate(http_requests_total[5m]))",
                "legendFormat": "{{service}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 12}
          },
          {
            "id": 3,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum by (service, le) (rate(http_request_duration_seconds_bucket[5m])))",
                "legendFormat": "{{service}} - 95th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 12}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
  
  getit-bangladesh-business.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GetIt Bangladesh - Business Metrics",
        "tags": ["getit", "bangladesh", "business"],
        "timezone": "Asia/Dhaka",
        "panels": [
          {
            "id": 1,
            "title": "Payment Methods Distribution",
            "type": "piechart",
            "targets": [
              {
                "expr": "sum by (payment_method) (payments_total)",
                "legendFormat": "{{payment_method}}"
              }
            ],
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Mobile Banking (bKash, Nagad, Rocket)",
            "type": "graph",
            "targets": [
              {
                "expr": "sum by (provider) (rate(mobile_banking_transactions_total[5m]))",
                "legendFormat": "{{provider}}"
              }
            ],
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 0}
          },
          {
            "id": 3,
            "title": "Vendor Performance",
            "type": "table",
            "targets": [
              {
                "expr": "topk(10, sum by (vendor_id) (vendor_sales_bdt))",
                "legendFormat": "Vendor {{vendor_id}}"
              }
            ],
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 0}
          }
        ],
        "time": {
          "from": "now-24h",
          "to": "now"
        },
        "refresh": "5m"
      }
    }
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: grafana-pdb
  namespace: getit-monitoring
  labels:
    app: grafana
    component: monitoring
    platform: getit-bangladesh
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: grafana
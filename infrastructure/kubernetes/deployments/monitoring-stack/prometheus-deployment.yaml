apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: getit-monitoring
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
    tier: infrastructure
  annotations:
    description: "Prometheus Monitoring for GetIt Bangladesh"
    contact: "devops-team@getit.com.bd"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
        platform: getit-bangladesh
        version: v2.48.0
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/data
        - --storage.tsdb.retention.time=30d
        - --storage.tsdb.retention.size=50GB
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        - --web.enable-admin-api
        - --log.level=info
        - --query.max-concurrency=50
        - --query.timeout=2m
        - --storage.tsdb.min-block-duration=2h
        - --storage.tsdb.max-block-duration=2h
        - --web.external-url=https://prometheus.getit.com.bd
        env:
        - name: PROMETHEUS_CLUSTER_NAME
          value: "getit-bangladesh-production"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus/data
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        resources:
          requests:
            memory: "4Gi"
            cpu: "1"
          limits:
            memory: "8Gi"
            cpu: "4"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      
      - name: prometheus-node-exporter
        image: prom/node-exporter:v1.7.0
        ports:
        - containerPort: 9100
          name: node-metrics
          protocol: TCP
        args:
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        - --path.rootfs=/host/root
        - --collector.filesystem.mount-points-exclude
        - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data-pvc
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /
      
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: monitoring
      
      tolerations:
      - key: "monitoring-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - prometheus
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: getit-monitoring
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
  annotations:
    description: "Prometheus Service for GetIt Bangladesh"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: http
  - port: 9100
    targetPort: 9100
    protocol: TCP
    name: node-metrics
  selector:
    app: prometheus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: getit-monitoring
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: getit-monitoring
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data-pvc
  namespace: getit-monitoring
  labels:
    app: prometheus
    component: storage
    platform: getit-bangladesh
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd-storage
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: getit-monitoring
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'getit-bangladesh-production'
        region: 'asia-southeast-1'
    
    rule_files:
    - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
    
    scrape_configs:
    # Prometheus itself
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
    
    # Node Exporter
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'node-exporter'
        action: keep
    
    # Kubernetes API Server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    # Kubernetes Nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    
    # GetIt Microservices
    - job_name: 'getit-services'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - getit-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    
    # Database Metrics
    - job_name: 'postgresql'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - getit-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: 'postgresql'
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: 'metrics'
        action: keep
    
    - job_name: 'mongodb'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - getit-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: 'mongodb'
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: 'metrics'
        action: keep
    
    - job_name: 'redis'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - getit-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: 'redis-cluster'
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: 'metrics'
        action: keep
    
    # Frontend Applications
    - job_name: 'frontend-apps'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - getit-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_name]
        regex: '(customer-web|admin-panel|vendor-dashboard)'
        action: keep
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: getit-monitoring
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
data:
  getit-bangladesh-rules.yml: |
    groups:
    - name: getit-bangladesh-alerts
      rules:
      # High-level service alerts
      - alert: ServiceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
          service: "{{ $labels.job }}"
        annotations:
          summary: "Service {{ $labels.job }} is down"
          description: "Service {{ $labels.job }} has been down for more than 1 minute"
      
      # Database alerts
      - alert: PostgreSQLDown
        expr: up{job="postgresql"} == 0
        for: 30s
        labels:
          severity: critical
          service: "postgresql"
        annotations:
          summary: "PostgreSQL database is down"
          description: "PostgreSQL database has been down for more than 30 seconds"
      
      - alert: MongoDBDown
        expr: up{job="mongodb"} == 0
        for: 30s
        labels:
          severity: critical
          service: "mongodb"
        annotations:
          summary: "MongoDB database is down"
          description: "MongoDB database has been down for more than 30 seconds"
      
      - alert: RedisDown
        expr: up{job="redis"} == 0
        for: 30s
        labels:
          severity: critical
          service: "redis"
        annotations:
          summary: "Redis cache is down"
          description: "Redis cache has been down for more than 30 seconds"
      
      # Performance alerts
      - alert: HighCPUUsage
        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
        for: 5m
        labels:
          severity: warning
          service: "system"
        annotations:
          summary: "High CPU usage on {{ $labels.instance }}"
          description: "CPU usage is above 80% for more than 5 minutes"
      
      - alert: HighMemoryUsage
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
        for: 5m
        labels:
          severity: warning
          service: "system"
        annotations:
          summary: "High memory usage on {{ $labels.instance }}"
          description: "Memory usage is above 85% for more than 5 minutes"
      
      # Bangladesh business critical alerts
      - alert: OrderServiceDown
        expr: up{job="getit-services", kubernetes_name="order-service"} == 0
        for: 30s
        labels:
          severity: critical
          service: "order-service"
          business_impact: "high"
        annotations:
          summary: "Order service is down - Critical business impact"
          description: "Order service has been down for more than 30 seconds. This affects customer checkout and order processing."
      
      - alert: PaymentServiceDown
        expr: up{job="getit-services", kubernetes_name="payment-service"} == 0
        for: 30s
        labels:
          severity: critical
          service: "payment-service"
          business_impact: "high"
        annotations:
          summary: "Payment service is down - Critical business impact"
          description: "Payment service has been down for more than 30 seconds. This affects bKash, Nagad, and Rocket payments."
      
      - alert: CustomerWebDown
        expr: up{job="frontend-apps", kubernetes_name="customer-web"} == 0
        for: 1m
        labels:
          severity: critical
          service: "customer-web"
          business_impact: "high"
        annotations:
          summary: "Customer web application is down"
          description: "Customer web application has been down for more than 1 minute. Customers cannot access the platform."
      
      # Festival traffic alerts (Bangladesh specific)
      - alert: EidTrafficSpike
        expr: rate(http_requests_total[1m]) > 1000
        for: 2m
        labels:
          severity: warning
          service: "traffic"
          event: "eid"
        annotations:
          summary: "High traffic detected - Possible Eid festival spike"
          description: "Request rate is above 1000 requests/minute, indicating festival traffic spike"
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: prometheus-pdb
  namespace: getit-monitoring
  labels:
    app: prometheus
    component: monitoring
    platform: getit-bangladesh
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: prometheus
# Logstash Configuration for GetIt Bangladesh
# Amazon.com/Shopee.sg-Level Log Processing Pipeline

input {
  # Application logs from containers
  beats {
    port => 5044
  }
  
  # API Gateway logs
  http {
    port => 8080
    codec => json
    tags => ["api-gateway"]
  }
  
  # Database logs
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/vendor/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${DATABASE_URL}"
    jdbc_user => "${PGUSER}"
    jdbc_password => "${PGPASSWORD}"
    statement => "SELECT * FROM audit_logs WHERE created_at > :sql_last_value ORDER BY created_at"
    use_column_value => true
    tracking_column => "created_at"
    tracking_column_type => "timestamp"
    schedule => "*/30 * * * * *"
    tags => ["database-audit"]
  }
  
  # Redis logs
  redis {
    host => "${REDIS_HOST:localhost}"
    port => 6379
    data_type => "list"
    key => "logstash"
    tags => ["redis-logs"]
  }
  
  # System metrics
  exec {
    command => "docker stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}'"
    interval => 30
    tags => ["docker-stats"]
  }
}

filter {
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Parse nginx access logs
  if "nginx" in [tags] {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG} %{QS:x_forwarded_for}"
      }
    }
    
    # Parse response time
    if [request] {
      grok {
        match => { 
          "request" => "%{WORD:method} %{URIPATH:path}(?:%{URIPARAM:params})? HTTP/%{NUMBER:http_version}"
        }
      }
    }
    
    # Convert response time to float
    if [response_time] {
      mutate {
        convert => { "response_time" => "float" }
      }
    }
  }
  
  # Parse application logs
  if "application" in [tags] {
    # Extract log level
    grok {
      match => { 
        "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:level}: %{GREEDYDATA:log_message}"
      }
    }
    
    # Parse structured application logs
    if [log_message] =~ /^\{.*\}$/ {
      json {
        source => "log_message"
        target => "app_data"
      }
    }
  }
  
  # Parse API Gateway logs
  if "api-gateway" in [tags] {
    # Extract API metrics
    if [path] {
      mutate {
        add_field => { "api_endpoint" => "%{path}" }
      }
    }
    
    # Categorize by service
    if [path] =~ /^\/api\/v1\/users/ {
      mutate { add_field => { "service" => "user-service" } }
    } else if [path] =~ /^\/api\/v1\/products/ {
      mutate { add_field => { "service" => "product-service" } }
    } else if [path] =~ /^\/api\/v1\/orders/ {
      mutate { add_field => { "service" => "order-service" } }
    } else if [path] =~ /^\/api\/v1\/payments/ {
      mutate { add_field => { "service" => "payment-service" } }
    } else {
      mutate { add_field => { "service" => "unknown" } }
    }
  }
  
  # Enrich with geolocation
  if [clientip] {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }
  
  # Parse user agent
  if [agent] {
    useragent {
      source => "agent"
      target => "user_agent"
    }
  }
  
  # Add timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
  }
  
  # Add environment information
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:development}"
      "cluster" => "getit-bangladesh"
      "region" => "bangladesh"
    }
  }
  
  # Calculate response time categories
  if [response_time] {
    if [response_time] < 100 {
      mutate { add_field => { "response_category" => "fast" } }
    } else if [response_time] < 500 {
      mutate { add_field => { "response_category" => "normal" } }
    } else if [response_time] < 1000 {
      mutate { add_field => { "response_category" => "slow" } }
    } else {
      mutate { add_field => { "response_category" => "very_slow" } }
    }
  }
  
  # Detect errors and anomalies
  if [response] {
    if [response] >= 400 {
      mutate { add_field => { "log_type" => "error" } }
      
      if [response] >= 500 {
        mutate { add_field => { "severity" => "high" } }
      } else {
        mutate { add_field => { "severity" => "medium" } }
      }
    } else {
      mutate { add_field => { "log_type" => "success" } }
      mutate { add_field => { "severity" => "low" } }
    }
  }
  
  # Parse Bangladesh-specific data
  if [geoip][country_code2] == "BD" {
    mutate { add_field => { "local_user" => true } }
    
    # Add division information for Bangladesh
    if [geoip][city] {
      if [geoip][city] =~ /(?i)dhaka/ {
        mutate { add_field => { "bd_division" => "Dhaka" } }
      } else if [geoip][city] =~ /(?i)chittagong/ {
        mutate { add_field => { "bd_division" => "Chittagong" } }
      } else if [geoip][city] =~ /(?i)sylhet/ {
        mutate { add_field => { "bd_division" => "Sylhet" } }
      } else if [geoip][city] =~ /(?i)rajshahi/ {
        mutate { add_field => { "bd_division" => "Rajshahi" } }
      } else if [geoip][city] =~ /(?i)khulna/ {
        mutate { add_field => { "bd_division" => "Khulna" } }
      } else if [geoip][city] =~ /(?i)barisal/ {
        mutate { add_field => { "bd_division" => "Barisal" } }
      } else if [geoip][city] =~ /(?i)rangpur/ {
        mutate { add_field => { "bd_division" => "Rangpur" } }
      } else if [geoip][city] =~ /(?i)mymensingh/ {
        mutate { add_field => { "bd_division" => "Mymensingh" } }
      }
    }
  } else {
    mutate { add_field => { "local_user" => false } }
  }
  
  # Remove sensitive information
  mutate {
    remove_field => [ "password", "token", "api_key", "credit_card" ]
  }
}

output {
  # Main elasticsearch output
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
    user => "${ELASTICSEARCH_USER:elastic}"
    password => "${ELASTICSEARCH_PASSWORD:changeme}"
    index => "getit-logs-%{+YYYY.MM.dd}"
    template_name => "getit-logs"
    template_pattern => "getit-logs-*"
    template => "/usr/share/logstash/templates/getit-template.json"
  }
  
  # Error logs to separate index
  if [log_type] == "error" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
      user => "${ELASTICSEARCH_USER:elastic}"
      password => "${ELASTICSEARCH_PASSWORD:changeme}"
      index => "getit-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Performance metrics to separate index
  if [response_time] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
      user => "${ELASTICSEARCH_USER:elastic}"
      password => "${ELASTICSEARCH_PASSWORD:changeme}"
      index => "getit-performance-%{+YYYY.MM.dd}"
    }
  }
  
  # Business metrics
  if [service] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
      user => "${ELASTICSEARCH_USER:elastic}"
      password => "${ELASTICSEARCH_PASSWORD:changeme}"
      index => "getit-business-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output
  if "${DEBUG:false}" == "true" {
    stdout { 
      codec => rubydebug 
    }
  }
  
  # Send alerts to monitoring system
  if [severity] == "high" {
    http {
      url => "${ALERT_WEBHOOK_URL}"
      http_method => "post"
      content_type => "application/json"
      format => "json"
      mapping => {
        "alert_type" => "high_severity_error"
        "service" => "%{service}"
        "message" => "%{message}"
        "timestamp" => "%{@timestamp}"
        "environment" => "%{environment}"
      }
    }
  }
}
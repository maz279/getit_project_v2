import{b5 as t}from"./index-BbFXQDnE.js";class h{constructor(){this.baseUrl="/api/v1/shipping"}async getShippingMethods(e={}){const a=new URLSearchParams({destination:e.destination||"",weight:e.weight||"",serviceType:e.serviceType||"",isActive:e.isActive||"true"});return await t(`${this.baseUrl}/methods?${a}`)}async getShippingZones(){return await t(`${this.baseUrl}/zones`)}async getZoneDetails(e){return await t(`${this.baseUrl}/zones/${e}`)}async createShippingMethod(e){return await t(`${this.baseUrl}/methods`,{method:"POST",body:JSON.stringify(e)})}async updateShippingMethod(e,a){return await t(`${this.baseUrl}/methods/${e}`,{method:"PUT",body:JSON.stringify(a)})}async calculateRates(e){return await t(`${this.baseUrl}/rates/calculate`,{method:"POST",body:JSON.stringify(e)})}async getBulkRates(e){return await t(`${this.baseUrl}/rates/bulk`,{method:"POST",body:JSON.stringify(e)})}async compareShippingOptions(e){return await t(`${this.baseUrl}/rates/compare`,{method:"POST",body:JSON.stringify(e)})}async getDeliveryEstimates(e){return await t(`${this.baseUrl}/rates/delivery-estimates`,{method:"POST",body:JSON.stringify(e)})}async createShipment(e){return await t(`${this.baseUrl}/shipments`,{method:"POST",body:JSON.stringify(e)})}async getShipment(e){return await t(`${this.baseUrl}/shipments/${e}`)}async updateShipment(e,a){return await t(`${this.baseUrl}/shipments/${e}`,{method:"PUT",body:JSON.stringify(a)})}async cancelShipment(e,a=""){return await t(`${this.baseUrl}/shipments/${e}/cancel`,{method:"POST",body:JSON.stringify({reason:a})})}async getShipmentsByOrder(e){return await t(`${this.baseUrl}/shipments/order/${e}`)}async getShipmentsByVendor(e,a={}){const s=new URLSearchParams({status:a.status||"",startDate:a.startDate||"",endDate:a.endDate||"",page:a.page||"1",limit:a.limit||"20"});return await t(`${this.baseUrl}/shipments/vendor/${e}?${s}`)}async trackShipment(e,a=""){const s=new URLSearchParams({carrier:a});return await t(`${this.baseUrl}/track/${e}?${s}`)}async getTrackingHistory(e){return await t(`${this.baseUrl}/shipments/${e}/tracking-history`)}async updateTracking(e,a){return await t(`${this.baseUrl}/shipments/${e}/tracking`,{method:"POST",body:JSON.stringify(a)})}async confirmDelivery(e,a){return await t(`${this.baseUrl}/shipments/${e}/confirm-delivery`,{method:"POST",body:JSON.stringify(a)})}async reportDeliveryIssue(e,a){return await t(`${this.baseUrl}/shipments/${e}/delivery-issue`,{method:"POST",body:JSON.stringify(a)})}async getBangladeshCouriers(){return await t(`${this.baseUrl}/bangladesh/couriers`)}async createPathaoShipment(e){return await t(`${this.baseUrl}/bangladesh/pathao/create-shipment`,{method:"POST",body:JSON.stringify(e)})}async createPaperflyShipment(e){return await t(`${this.baseUrl}/bangladesh/paperfly/create-shipment`,{method:"POST",body:JSON.stringify(e)})}async getPathaoZones(){return await t(`${this.baseUrl}/bangladesh/pathao/zones`)}async getPaperflyCoverageAreas(){return await t(`${this.baseUrl}/bangladesh/paperfly/coverage-areas`)}async calculateBangladeshShipping(e){return await t(`${this.baseUrl}/bangladesh/calculate-rates`,{method:"POST",body:JSON.stringify({...e,country:"BD"})})}async getBangladeshDivisionShipping(e){return await t(`${this.baseUrl}/bangladesh/divisions/${e}/shipping-info`)}async validateAddress(e){return await t(`${this.baseUrl}/address/validate`,{method:"POST",body:JSON.stringify(e)})}async getAddressSuggestions(e,a="BD"){const s=new URLSearchParams({q:e,country:a});return await t(`${this.baseUrl}/address/suggestions?${s}`)}async standardizeAddress(e){return await t(`${this.baseUrl}/address/standardize`,{method:"POST",body:JSON.stringify(e)})}async getPostalCodeInfo(e,a="BD"){const s=new URLSearchParams({country:a});return await t(`${this.baseUrl}/address/postal-code/${e}?${s}`)}async schedulePickup(e){return await t(`${this.baseUrl}/pickup/schedule`,{method:"POST",body:JSON.stringify(e)})}async getPickupAvailability(e,a){return await t(`${this.baseUrl}/pickup/availability`,{method:"POST",body:JSON.stringify({...e,date:a})})}async cancelPickup(e,a=""){return await t(`${this.baseUrl}/pickup/${e}/cancel`,{method:"POST",body:JSON.stringify({reason:a})})}async getPickupHistory(e,a={}){const s=new URLSearchParams({startDate:a.startDate||"",endDate:a.endDate||"",status:a.status||"",page:a.page||"1",limit:a.limit||"20"});return await t(`${this.baseUrl}/pickup/vendor/${e}/history?${s}`)}async createReturnShipment(e){return await t(`${this.baseUrl}/returns/create-shipment`,{method:"POST",body:JSON.stringify(e)})}async getReturnShippingLabel(e){return await t(`${this.baseUrl}/returns/${e}/shipping-label`,{responseType:"blob"})}async trackReturnShipment(e){return await t(`${this.baseUrl}/returns/${e}/track`)}async processReturnDelivery(e,a){return await t(`${this.baseUrl}/returns/${e}/process-delivery`,{method:"POST",body:JSON.stringify(a)})}async getShippingAnalytics(e="30d",a={}){const s=new URLSearchParams({period:e,vendorId:a.vendorId||"",carrier:a.carrier||"",region:a.region||""});return await t(`${this.baseUrl}/analytics?${s}`)}async getDeliveryPerformance(e="30d",a=""){const s=new URLSearchParams({period:e,carrier:a});return await t(`${this.baseUrl}/analytics/delivery-performance?${s}`)}async getShippingCostAnalysis(e="30d",a="carrier"){const s=new URLSearchParams({period:e,breakdown:a});return await t(`${this.baseUrl}/analytics/cost-analysis?${s}`)}async getCarrierComparison(e="30d",a=["cost","speed","reliability"]){return await t(`${this.baseUrl}/analytics/carrier-comparison`,{method:"POST",body:JSON.stringify({period:e,metrics:a})})}async bulkCreateShipments(e){return await t(`${this.baseUrl}/shipments/bulk-create`,{method:"POST",body:JSON.stringify({shipments:e})})}async bulkUpdateTracking(e){return await t(`${this.baseUrl}/tracking/bulk-update`,{method:"POST",body:JSON.stringify({updates:e})})}async exportShippingData(e,a={}){const s=new URLSearchParams({type:e,format:a.format||"csv",...a});return await t(`${this.baseUrl}/export?${s}`,{responseType:"blob"})}subscribeToTrackingUpdates(e,a={}){const s=`ws://${window.location.host}/api/v1/shipping/tracking/subscribe`,r=new WebSocket(s);return r.onopen=()=>{r.send(JSON.stringify({type:"subscribe",filters:a}))},r.onmessage=i=>{const n=JSON.parse(i.data);e(n)},r}getShippingStatusColor(e){return{pending:"#F59E0B",picked_up:"#3B82F6",in_transit:"#8B5CF6",out_for_delivery:"#F97316",delivered:"#10B981",exception:"#EF4444",returned:"#6B7280"}[e.toLowerCase()]||"#6B7280"}formatWeight(e,a="kg"){return`${e} ${a}`}calculateVolume(e){const{length:a,width:s,height:r}=e;return a*s*r}formatTrackingNumber(e,a=""){return e.toUpperCase()}handleError(e,a){console.error(`Shipping API Error - ${a}:`,e);const s={success:!1,error:e.message||"An unexpected shipping error occurred",operation:a,timestamp:new Date().toISOString()};return e.status===401?s.error="Shipping authentication required. Please log in.":e.status===403?s.error="You do not have permission to perform this shipping operation.":e.status===404?s.error="The requested shipping resource was not found.":e.status===409?s.error="Shipping conflict. Please refresh and try again.":e.status===422?s.error="Invalid shipping data. Please check your input.":e.status===429?s.error="Too many shipping requests. Please try again later.":e.status>=500&&(s.error="Shipping server error. Please try again later."),s}}export{h as S};
